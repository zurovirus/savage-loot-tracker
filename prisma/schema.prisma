// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

 model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 }
 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  groups        Group[]
  sessions      Session[]
}

model Player{
  id        Int @id @default(autoincrement())
  name      String 
  class     Class @relation(fields: [classId], references: [id])
  classId   Int
  loots     PlayerLoot[]
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

model Group{
  id        Int @id @default(autoincrement())
  name      String
  players   Player[]
  users     User[]
}

model Role {
  id        Int @id @default(autoincrement())
  name      String @unique
  classes   Class[]
}

model Class {
  id        Int @id @default(autoincrement())
  name      String @unique
  role      Role @relation(fields: [roleId], references: [id])
  roleId    Int
  players   Player[]
}

model Tier {
  id        Int @id @default(autoincrement())
  name      String @unique
  fights    Fight[]
}

model Fight {
  id        Int @id @default(autoincrement())
  name      String @unique
  floor     Int
  image     String?
  tier      Tier @relation(fields: [tierId], references: [id])
  tierId    Int
  loots     Loot[]
}

model Loot_Type {
  id        Int @id @default(autoincrement())
  name      String @unique
  loots     Loot[]
}

model Loot {
  id        Int @id @default(autoincrement())
  name      String @unique
  image     String?
  type      Loot_Type @relation(fields: [typeId], references: [id])
  typeId    Int
  fights    Fight[]
  players   PlayerLoot[]
}

model PlayerLoot {
  id        Int @id @default(autoincrement())
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  loot      Loot @relation(fields: [lootId], references: [id])
  lootId    Int
  date      DateTime  @default(now())
}